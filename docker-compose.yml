version: '3'

services:
  messagebus:
    image: rabbitmq:3-management
    volumes:
      - messagebus_data:/data/messagebus_devops
    ports:
      - "5672:5672"
      - "15672:15672"

  mongo:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db_devops
    ports:
      - "27017:27017"

  register-service:
    build: Microservices/register-service
    ports:
      - "3001:3001"
    env_file:
      docker.env
    environment:
      - DOCKERPORT=3001
    depends_on:
      - mongo
      - messagebus

  login-service:
    build: ./Microservices/login-service
    ports:
      - "3002:3002"
    env_file:
      docker.env
    environment:
      - DOCKERPORT=3002
    depends_on:
      - mongo
      - messagebus

  grafana:
    build: ./grafana
    ports:
      - "3000:3000"

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml

volumes:
  mongodb_data:
  messagebus_data:
  prometheus-data:








# Devops:
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# services:
#   server:
#     build:
#       context: ./Microservices/register-service
#     environment:
#       NODE_ENV: production
#     ports:
#       - 3003:3003

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

